---
- name: Register nginx.conf file
  stat:
    path: "{{ nginx_conf_dir }}/nginx.conf"
  register: nginx_conf_file  

- file:
    state: directory
    path: "{{ item }}"
    recurse: yes
  loop:
    "{{ dir_exists }}"

- name: Create grafana directory
  file:
    state: directory
    path: "{{ grafana_data_dir }}"
    owner: "472"
    group: "472"
    mode: 0755

- name: set hostname
  include_role:
    name: toni.base
    tasks_from: host
  vars:
    deploy_hostname: "{{ deploy_name }}"

- name: Deploy Make
  template:
    src: "Makefile.j2"
    dest: "{{ user_path }}/{{ deploy_name }}/Makefile"

- name: Copy snippets
  include_role:
    name: toni.openresty
    tasks_from: snippets
  vars:  
    keycloak_access_group: "{{ access_group }}"
    nginx_snippets:
      - { srcname: "auth.conf.j2", destname: "{{ access_group }}_auth.conf" }

- name: Create network
  include_role:
    name: toni.docker
    tasks_from: create_network
  vars:
    ipam_driver_options:
      encrypted: "false"
    docker_networks:
      - { name: "{{ stack_network_name }}", subnet: "{{ stack_subnet }}", driver: "overlay", internal: 'no', gateway: "" }
  when: create_stack_network|default(false)

- name: Configure nginx logs
  when: nginx_conf_file.stat.exists
  include_role:
    name: toni.openresty
    tasks_from: logs
  vars:
    nginx_logfiles:
      - { conffile: "{{ nginx_conf_dir }}/conf.d/{{ nginx_subdomain }}{{ nginx_domain }}.conf", logdir: "/usr/local/openresty/nginx/logs" }    

- name: Deploy docker-compose file
  template:
    src: docker-compose.yml.j2
    dest: "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"
  #notify: restart grafana

- file:
    state: directory
    path: "{{ grafana_prov_dir }}/datasources"
    owner: "472"
    group: "472"

- file:
    state: directory
    path: "{{ grafana_prov_dir }}/dashboards"
    owner: "472"
    group: "472"

- file:
    state: directory
    path: "{{ grafana_prov_dir }}/notifiers"
    owner: "472"
    group: "472"

- file:
    state: directory
    path: "{{ grafana_prov_dir }}/plugins"
    owner: "472"
    group: "472"

- name: Check if dashboard files exist
  stat:
    path: "{{ grafana_prov_dir }}/dashboards/all_servers.json"
  register: dashboard_files

#https://github.com/rfrail3/grafana-dashboards/tree/master/prometheus
#https://github.com/greenstatic/bigbluebutton-exporter/blob/master/extras/dashboards/server_instance_node_exporter.json
- name: Download dashboards using GET_URL
  when: not dashboard_files.stat.exists
  get_url:
    url: "{{ item.url }}"
    dest: "{{ grafana_prov_dir }}/dashboards/{{ item.filename }}"
    owner: "472"
    group: "472"
    mode: 0640
#    mode : 0755
  ignore_errors: yes
  loop:
    - { url: 'https://raw.githubusercontent.com/greenstatic/bigbluebutton-exporter/master/extras/dashboards/all_servers.json', filename: 'all_servers.json' }
    - { url: 'https://raw.githubusercontent.com/greenstatic/bigbluebutton-exporter/master/extras/dashboards/server_instance_node_exporter.json', filename: 'server_instance_node_exporter.json' }
    - { url: 'https://raw.githubusercontent.com/rfrail3/grafana-dashboards/master/prometheus/node-exporter-full.json', filename: 'node-exporter-full.json' }

#- name: Deploy your own dashboard templates from local folder 
#  template:
#    src: "dashboards/{{ item }}"
#    dest: "{{ grafana_prov_dir }}/dashboards/{{ item }}"
#    owner: "472"
#    group: "472"
#    mode: 0640
#  notify: restart grafana
#  loop:
#    - all_servers.json
#    - server_instance_node_exporter.json
#    - node-exporter-full_rev21.json

- name: Create/Update grafana datasources
  become: true
  copy:
    dest: "{{ grafana_prov_dir }}/datasources/prometheus.yml"
    content: |
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: 'http://prometheus:9090'
          basicAuth: false
          isDefault: true
    backup: false
    owner: "472"
    group: "472"
    mode: 0640
  #notify: restart grafana

- name: Create/Update Grafana dashboards
  become: true
  copy:
    dest: "{{ grafana_prov_dir }}/dashboards/dashboards.yml"
    content: |
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          type: file
          disableDeletion: false
          updateIntervalSeconds: 300 
          options:
            path: "/etc/grafana/provisioning/dashboards"
    backup: false
    owner: "472"
    group: "472"
    mode: 0640
  #notify: restart grafana

- name: Deploy grafana vhost
  template:
    src: grafana_nginx.conf.j2
    dest: "{{ nginx_conf_dir }}/conf.d/grafana.conf"
  #notify: restart nginx docker

- name: restart grafana stack
  when: nginx_run_as is defined and nginx_run_as=="stack"
  docker_stack:
    state: absent
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"

- name: restart grafana stack
  when: nginx_run_as is defined and nginx_run_as=="stack"
  docker_stack:
    state: present
    prune: yes
    name: "{{ deploy_name }}"
    compose:
      - "{{ user_path }}/{{ deploy_name }}/docker-compose.yml"  

- name: restart nginx stack
  when: nginx_run_as is defined and nginx_run_as=="stack"
  docker_stack:
    state: absent
    name: "{{ nginx_stack }}"
    compose:
      - "{{ user_path }}/{{ nginx_stack }}/docker-compose.yml" 

- name: restart nginx stack
  when: nginx_run_as is defined and nginx_run_as=="stack" and nginx_stack_keep_alive|bool == false
  docker_stack:
    state: present
    prune: yes
    name: "{{ nginx_stack }}"
    compose:
      - "{{ user_path }}/{{ nginx_stack }}/docker-compose.yml" 
      
- name: reload nginx stack
  command: make reload
  args:
    chdir: "{{ user_path }}/{{ nginx_stack }}"
  register: result_reload
  when: nginx_stack_keep_alive|bool == true

- name: set cert facts 
  include_role:
    name: toni.certificates
    tasks_from: certbot_facts
  vars:
    certbot_server: "{{ nginx_subdomain }}{{ nginx_domain }}"
    record_dns_create: false
    record_dns_update: false
    dns_create: false

- name: Deploy grafana vhost
  when: not existing_certs|bool and certbot_cert_exists|bool
  template:
    src: grafana_nginx.conf.j2
    dest: "{{ nginx_conf_dir }}/conf.d/grafana.conf"

- name: restart nginx stack
  when: nginx_run_as is defined and nginx_run_as=="stack"
  docker_stack:
    state: absent
    name: "{{ nginx_stack }}"
    compose:
      - "{{ user_path }}/{{ nginx_stack }}/docker-compose.yml" 

- name: restart nginx stack
  when: nginx_run_as is defined and nginx_run_as=="stack" and nginx_stack_keep_alive|bool == false
  docker_stack:
    state: present
    prune: yes
    name: "{{ nginx_stack }}"
    compose:
      - "{{ user_path }}/{{ nginx_stack }}/docker-compose.yml" 
      
- name: reload nginx stack
  command: make reload
  args:
    chdir: "{{ user_path }}/{{ nginx_stack }}"
  register: result_reload
  when: nginx_stack_keep_alive|bool == true

- name: Create Keycloak client
  include_role:
    name: toni.keycloak
    tasks_from: client
  vars:
    keycloak_role_name: "{{ item }}"
  when: create_kc_client|default(false)

- name: Create Keycloak role(s)
  include_role:
    name: toni.keycloak
    tasks_from: role
  vars:
    keycloak_role_name: "{{ item }}"
  when: create_kc_role|default(false)
  loop:
    "{{ keycloak_roles }}"

- name: Create Keycloak user(s)
  include_role:
    name: toni.keycloak
    tasks_from: user
  vars:
    kcu: "{{ kc_userdata }}"
  when: create_kc_user|default(false)
  loop:
    "{{ keycloak_users }}"
  loop_control:
    loop_var: kc_userdata

- name: Add role to user
  include_role:
    name: toni.keycloak
    tasks_from: clientrole
  vars:
    keycloak_username: "{{ kc_userdata.username }}"
    keycloak_role: 'grafana'
  when: create_kc_user|default(false)
  loop:
    "{{ keycloak_users }}"
  loop_control:
    loop_var: kc_userdata


